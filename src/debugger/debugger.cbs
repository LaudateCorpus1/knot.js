body{
    dataContext:/debuggerModel;
}

#tabPage .page-headerArea>.header:first-child{
    @click:@{this.showLogViewer = false;}
}
#tabPage .page-headerArea>.header:last-child{
    @click:@{this.showLogViewer = true;}
}
#tabPage .page-headerArea>.header:last-child>span{
    className:highestLogLevel
}

#tabPage .page-headerArea>.header:first-child, #tabPage .page-contentArea>.pageContent:first-child{
    class:showLogViewer>{return value?"-selected":"+selected";}
}
#tabPage .page-headerArea>.header:last-child, #tabPage .page-contentArea>.pageContent:last-child{
    class:showLogViewer>{return !value?"-selected":"+selected";}
}

#domTree{
    foreach: domTreeNodes
}

#domTree>li .expander>i{
    @click:@{this.isExpanded = !this.isExpanded;};
    class:isExpanded>{return value?"+fa-minus-circle -fa-plus-circle -iconButtonChecked":"-fa-minus-circle +fa-plus-circle +iconButtonChecked";}
}

#domTree>li .nodeTitle{
    textContent: description;
    class:noKnotSetting>{return value?"+emptyNode":"";}
}
#domTree>li .highlightMark{
    style.display:isHighlighted>{return value?"inline-block":"none";}
}

#domTree>li .locateElementButton{
    @click:@/debuggerModel.onLocateElement
}
#domTree>li .checkDataContextButton{
    style.display:dataContext>{return value?"inline-block":"none"};
    @click:@/debuggerModel.onShowDataContext
}

#domTree>li .knotList{
    foreach :options;
    style.display:options>{return (value&&value.length>0)?"block":"none";}
}

#domTree>li .nodeChildren{
    foreach[template: #(#domTree>li)]: childrenInfo;
    style.display:childrenInfo>{return (value&&value.length>0)?"block":"none";}
}

#domTree>li .collapsibleContent{
    style.display : isExpanded>{return value?"block":"none";}
}



.knotList>li .knotOption{
    textContent:description;
    title:description
}

.knotList>li .knotValueDirection, .knotList>li .knotValue, .knotList>li .knotValueDetail{
    style.display:latestValueInfo>{return value?"inline-block":"none";};
}

.knotList>li .knotValueDirection{
    class:latestValueInfo.isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
}

.knotList>li .knotValue{
    innerText[@set:@/debuggerModel.onKnotValueChanged]: latestValueInfo.value >{return JSON.stringify(value);};
    title: latestValueInfo.value >{return "Latest value:("+ (this.latestValueInfo.isFromLeftToRight?"output":"input") +")\n" + JSON.stringify(value);}
}

 .knotList>li .knotValueDetail{
    @click:@/debuggerModel.onShowKnotDetail
 }


/* knot change log*/
.knotChangeLog{
    foreach: knotChangeLog
}
.knotChangeLog .id{
    textContent: id
}
.knotChangeLog .nodeTitle{
    textContent: nodeDescription
}
.knotChangeLog .knotOption{
    textContent: knotOption.description
}
.knotChangeLog  .knotValueDirection{
    class:isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
}
.knotChangeLog .knotValue{
    textContent: value>{return JSON.stringify(value);};
}
.knotChangeLog .knotValueDetail{
    @click:@/debuggerModel.onShowKnotValueLogDetail
}

/*knot change log expander */
.treeContainer{
    class: isKnotLogExpanded>{return value?"-expander-top-collapsed +expander-top-expanded":"+expander-top-collapsed -expander-top-expanded";}
}
#knotChangeLogExpander{
    class: isKnotLogExpanded>{return value?"-expander-bottom-collapsed +expander-bottom-expanded":"+expander-bottom-collapsed -expander-bottom-expanded";}
}
#knotChangeLogExpander .expanderButton>i{
    class: isKnotLogExpanded>{return value?"+fa-chevron-circle-down -fa-chevron-circle-up":"-fa-chevron-circle-down +fa-chevron-circle-up";}
}
#knotChangeLogExpander .expanderButton{
    @click: @{this.isKnotLogExpanded = !this.isKnotLogExpanded;};
}
#knotChangeLogExpander .iconButton{
    @click: @/debuggerModel.onClearLogs;
}




 /* Log */

#logContainer{
    foreach[template:#logTemplate]: logs
}

#logTemplate{
    style.backgroundColor: level>{
        switch(value){
            case "Info":
                return "transparent";
            case "Warning":
                return "#b58900";
            case "Error":
                return "#dc322f";
        }
    };
}
#logTemplate .level{
    textContent:level
}
#logTemplate .time{
    textContent:time>{
        return value.getHours() + ":" + value.getMinutes() + ":" + value.getSeconds() +
                " " + value.getMilliseconds();
    }
}
#logTemplate .message{
    textContent: message
}
#logTemplate .exception{
    textContent: exception>{return value.toString();}
}

