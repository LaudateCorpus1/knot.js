body{
    dataContext:/debuggerModel;
}

#domViewer{
    style.display:#viewerSelection.selectedIndex>{return value==0?"block":"none";}
}

#logViewer{
    style.display:#viewerSelection.selectedIndex>{return value==1?"block":"none";}
}


#domTree{
    foreach < nodeTemplate: domTreeNodes
}

#nodeTemplate .expander>i{
    @click:@{this.isExpanded = !this.isExpanded;};
    class:isExpanded>{return value?"+fa-minus-circle -fa-plus-circle -iconButtonChecked":"-fa-minus-circle +fa-plus-circle +iconButtonChecked";}
}

#nodeTemplate .nodeTitle{
    textContent: description;
     class:noKnotSetting>{return value?"+emptyNode":"";}
}
#nodeTemplate .highlightMark{
    style.display:isHighlighted>{return value?"inline-block":"none";}
}

#nodeTemplate .locateElementButton{
    @click:@/debuggerModel.locateElement
}
#nodeTemplate .checkDataContextButton{
    style.display:dataContext>{return value?"inline-block":"none"};
    @click:@/debuggerModel.checkDataContext
}

#nodeTemplate .knotList{
    foreach<knotsListItemTemplate :options;
    style.display:options>{return (value&&value.length>0)?"block":"none";}
}

#nodeTemplate .nodeChildren{
    foreach < nodeTemplate: childrenInfo;
    style.display:childrenInfo>{return (value&&value.length>0)?"block":"none";}
}

#nodeTemplate .collapsibleContent{
    style.display : isExpanded>{return value?"block":"none";}
}



#knotsListItemTemplate .knotOption{
    textContent:description
}

#knotsListItemTemplate .knotValueDirection, #knotsListItemTemplate .knotValue, #knotsListItemTemplate .knotValueDetail{
    style.display:latestValueInfo>{return value?"inline-block":"none";};
}

#knotsListItemTemplate .knotValueDirection{
    class:latestValueInfo.isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
}

#knotsListItemTemplate .knotValue{
    innerText[@set:@/debuggerModel.onKnotValueChanged]: latestValueInfo.value >{return JSON.stringify(value);};
    title: latestValueInfo.value >{return "Latest value:("+ (this.latestValueInfo.isFromLeftToRight?"output":"input") +")\n" + JSON.stringify(value);}
}

 #knotsListItemTemplate .knotValueDetail{
    @click:@/debuggerModel.showKnotDetail
 }


/* knot change log*/
.knotChangeLog{
    foreach<knotChangeLogItemTemplate: knotChangeLog
}
.knotChangeLog .id{
    textContent: id
}
.knotChangeLog .nodeTitle{
    textContent: nodeDescription
}
.knotChangeLog .knotOption{
    textContent: knotOption.description
}
.knotChangeLog  .knotValueDirection{
    class:isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
}
.knotChangeLog .knotValue{
    textContent: value>{return JSON.stringify(value);};
}
.knotChangeLog .knotValueDetail{
    @click:@/debuggerModel.showKnotValueLogDetail
}

/*knot change log expander */
.treeContainer{
    class: isKnotLogExpanded>{return value?"-expander-top-collapsed +expander-top-expanded":"+expander-top-collapsed -expander-top-expanded";}
}
#knotChangeLogExpander{
    class: isKnotLogExpanded>{return value?"-expander-bottom-collapsed +expander-bottom-expanded":"+expander-bottom-collapsed -expander-bottom-expanded";}
}
#knotChangeLogExpander .expanderButton>i{
    class: isKnotLogExpanded>{return value?"+fa-chevron-circle-down -fa-chevron-circle-up":"-fa-chevron-circle-down +fa-chevron-circle-up";}
}
#knotChangeLogExpander .expanderButton{
    @click: @{this.isKnotLogExpanded = !this.isKnotLogExpanded;};
}



 /* Log */

#logContainer{
    foreach<logTemplate: logs
}

#logTemplate{
    style.backgroundColor: level>{
        switch(value){
            case "Info":
                return "transparent";
            case "Warning":
                return "#b58900";
            case "Error":
                return "#dc322f";
        }
    };
}
#logTemplate .level{
    textContent:level
}
#logTemplate .time{
    textContent:time>{
        return value.getHours() + ":" + value.getMinutes() + ":" + value.getSeconds() +
                " " + value.getMilliseconds();
    }
}
#logTemplate .message{
    textContent: message
}
#logTemplate .exception{
    textContent: exception>{return value.toString();}
}

